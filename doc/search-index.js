var searchIndex = JSON.parse('{\
"rust_algorithm_club":{"doc":"","t":[0,3,3,3,3,3,3,3,0,5,5,5,5,0,5,5,5,5,5,5,17,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["collections","SinglyLinkedList","HashMap","HashSet","Stack","BloomFilter","Deque","Queue","searching","linear_search","binary_search","interpolation_search","exponential_search","sorting","bubble_sort","bubble_sort_optimized","binary_insertion_sort","insertion_sort","selection_sort","shellsort","MARCIN_GAPS","mergesort","mergesort_bottom_up","heapsort","quicksort","quicksort_3way","quicksort_hoare","quicksort_manual_tco","quicksort_optimized","bucket_sort","counting_sort","radix_sort","timsort","introsort","pdqsort","levenshtein_distance","levenshtein_distance_naive","hamming_distance","hamming_distance_str","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","drop","drop","into_iter","into_iter","default","default","eq","eq","partial_cmp","fmt","fmt","index","index_mut","from_iter","new","push_front","pop_front","insert_after","remove","clear","is_empty","len","reverse","iter","iter_mut","new","with_capacity","get","get_mut","insert","remove","clear","is_empty","len","bucket_count","iter","iter_mut","into_iter","new","len","is_empty","insert","contains","remove","iter","union","difference","symmetric_difference","intersection","is_disjoint","is_subset","is_superset","with_capacity","pop","push","size","peek","new","insert","contains","new","push_front","push_back","pop_front","pop_back","front","back","is_empty","len","iter","iter_mut","new","enqueue","dequeue","peek","size"],"q":["rust_algorithm_club","rust_algorithm_club::collections","","","","","","","rust_algorithm_club","rust_algorithm_club::searching","","","","rust_algorithm_club","rust_algorithm_club::sorting","","","","","","","","","","","","","","","","","","","","","rust_algorithm_club","","","","rust_algorithm_club::collections","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Colletions are general-purpose or specialized data …","A singly-linked list with owned nodes.","A hash map implemented with separate chaining collision …","A hash set implementation based on <code>HashMap</code>.","A stack-like data structure implemented through a <code>Vec</code>.","A space efficient probablistic data structures offering …","A double-ended queue (abbreviated to <em>deque</em>), for which …","A queue-like data structure implement through […","Searching algorithms.","Linear search.","Handmade binary search for a sorted sequence.","Search in sorted sequences by checking the next position …","Exponential search. An binary search variant that can …","Sorting algorithms.","Bubble sort","Optimized bubble sort","Binary insertion sort.","Insertion sort.","Selection sort.","Shellsort","Marcin Ciura’s gap sequence.","Mergesort.","Mergesort bottom-up version.","Heapsort.","Quicksort with Lomuto parition scheme.","Quicksort with 3-way parition scheme.","Quicksort with Hoare parition scheme","Manual tail-call opitimized quicksort with Lomuto …","Tail-call opitimized quicksort with Lomuto parition …","Bucket sort","Counting sort","Radix sort for sorting unsigned integers.","Timsort.","Introsort.","Pattern-defeating quicksort.","Calculate Levenshtein distance for two UTF-8 encoded …","Naïvely calculate Levenshtein distance using the whole …","Calculate Hamming distance to two unsigned intergers.","Calculate Hamming distance of two UTF-8 encoded strings.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a consuming iterator, that is, one that moves …","","","","","Checks the equality of sets.","Compares sets to determine whether one is a subset of the …","","","","","","Constructs a new, empty <code>SinglyLinkedList<T></code>.","Prepends the given element value to the beginning of the …","Removes and returns the first element of the container. …","Inserts an element after the specified position in the …","Removes and returns an element at specified position from …","Removes all elements from the container.","Checks whether the container is empty.","Gets the number of elements in the container.","Reverses the order of the elements in the container.","Creates an iterator that yields immutable reference of …","Creates an iterator that yields mutable reference of each …","Creates an empty map with capacity 0.","Creates a map with a given capacity as the number of …","Gets a reference to the value under the specified key.","Gets a mutable reference to the value under the specified …","Inserts key-value pair into the map. Replaces previous …","Removes a pair with specified key.","Removes all key-value pairs but keeps the allocated …","Checks whether the container is empty.","Gets the number of key-value pairs in the container.","Gets the number of underlying buckets.","Creates an iterator that yields immutable reference of …","Creates an iterator that yields mutable reference of each …","Creates a consuming iterator yielding elements in …","Creates an empty set.","Gets the number of non-repetitive elements, equivalently …","Returns whether there is no any element in the set.","Inserts an element into the set.","Returns whether an element is present in the set.","Removes an element from the set.","Creates an iterator yielding immutable reference of each …","Returns an iterator visiting items that exists in <code>self</code>, …","Returns an iterator visiting items that exists in <code>self</code> …","Returns an iterator visiting items that only exists in …","Returns an iterator visiting items that exists in both …","Returns true if <code>self</code> has no elements in common with <code>other</code>.","Returns true if <code>other</code> contains at least all elements in …","Returns true if <code>self</code> contains at least all elements in …","Initialize a stack of certain capacity.","Removes the most recently added element that was not yet …","Adds an element to the collection.","Returns","Peeks the last element added without tampering the …","Creates an empty Bloom filter with desired capacity and …","Inserts an element into the container.","Returns whether an element is present in the container.","Constructs a new, empty [<code>Deque<T></code>].","Prepends the given element value to the beginning of the …","Appends the given element value to the end of the …","Removes and returns the first element of the container. …","Removes and returns the last element of the container. If …","Peeks the first element of the container. If there are no …","Peeks the last element of the container. If there are no …","Checks whether the container is empty.","Gets the number of elements in the container.","Creates an iterator that yields immutable reference of …","Creates an iterator that yields mutable reference of each …","Initialize a queue with empty vector","Adds an element into queue.","Removes the oldest added element in queue.","Retrieves the least recently added element without …","Retrieves the size of the queue."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,1,6,1,6,2,3,1,3,3,1,6,6,6,3,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,5,5,5,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7],"f":[null,null,null,null,null,null,null,null,null,[[],[["usize",15],["option",4]]],[[],[["usize",15],["result",4]]],[[["i32",15]],[["usize",15],["result",4]]],[[],[["usize",15],["result",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["str",15]],["usize",15]],[[["str",15]],["usize",15]],[[["u64",15]],["u32",15]],[[["str",15]],["usize",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["hashset",3]],["bool",15]],[[["hashset",3]],[["option",4],["ordering",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["option",4]],[[["usize",15]],[["result",4],["usize",15]]],[[["usize",15]],["option",4]],[[]],[[],["bool",15]],[[],["usize",15]],[[]],[[],["iter",3]],[[],["itermut",3]],[[]],[[["usize",15]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[["hashset",3]]],[[["hashset",3]]],[[["hashset",3]]],[[["hashset",3]]],[[["hashset",3]],["bool",15]],[[["hashset",3]],["bool",15]],[[["hashset",3]],["bool",15]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[],["usize",15]],[[],["option",4]],[[["usize",15],["f64",15]]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["usize",15]],[[],["iter",3]],[[],["itermut",3]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["usize",15]]],"p":[[3,"SinglyLinkedList"],[3,"HashMap"],[3,"HashSet"],[3,"Stack"],[3,"BloomFilter"],[3,"Deque"],[3,"Queue"]]}\
}');
initSearch(searchIndex);