var searchIndex = JSON.parse('{\
"rust_algorithm_club":{"doc":"","t":[0,5,5,5,5,0,0,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,17,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["collections","hamming_distance","hamming_distance_str","levenshtein_distance","levenshtein_distance_naive","searching","sorting","BloomFilter","Deque","HashMap","HashSet","Queue","SinglyLinkedList","Stack","back","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket_count","clear","clear","contains","contains","default","default","dequeue","difference","drop","drop","enqueue","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from_iter","front","get","get_mut","index","index_mut","insert","insert","insert","insert_after","intersection","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_empty","is_empty","is_empty","is_subset","is_superset","iter","iter","iter","iter","iter_mut","iter_mut","iter_mut","len","len","len","len","new","new","new","new","new","new","partial_cmp","peek","peek","pop","pop_back","pop_front","pop_front","push","push_back","push_front","push_front","remove","remove","remove","reverse","size","size","symmetric_difference","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity","binary_search","exponential_search","interpolation_search","linear_search","MARCIN_GAPS","binary_insertion_sort","bubble_sort","bubble_sort_optimized","bucket_sort","counting_sort","heapsort","insertion_sort","introsort","mergesort","mergesort_bottom_up","pdqsort","quicksort","quicksort_3way","quicksort_hoare","quicksort_manual_tco","quicksort_optimized","radix_sort","selection_sort","shellsort","timsort"],"q":["rust_algorithm_club","","","","","","","rust_algorithm_club::collections","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_algorithm_club::searching","","","","rust_algorithm_club::sorting","","","","","","","","","","","","","","","","","","","",""],"d":["Colletions are general-purpose or specialized data …","Calculate Hamming distance to two unsigned intergers.","Calculate Hamming distance of two UTF-8 encoded strings.","Calculate Levenshtein distance for two UTF-8 encoded …","Naïvely calculate Levenshtein distance using the whole …","Searching algorithms.","Sorting algorithms.","A space efficient probablistic data structures offering an …","A double-ended queue (abbreviated to <em>deque</em>), for which …","A hash map implemented with separate chaining collision …","A hash set implementation based on <code>HashMap</code>.","A queue-like data structure implement through <code>std::vec::Vec</code>…","A singly-linked list with owned nodes.","A stack-like data structure implemented through a <code>Vec</code>.","Peeks the last element of the container. If there are no …","","","","","","","","","","","","","","","Gets the number of underlying buckets.","Removes all elements from the container.","Removes all key-value pairs but keeps the allocated memory …","Returns whether an element is present in the set.","Returns whether an element is present in the container.","","","Removes the oldest added element in queue.","Returns an iterator visiting items that exists in <code>self</code> but …","","","Adds an element into queue.","","Checks the equality of sets.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Peeks the first element of the container. If there are no …","Gets a reference to the value under the specified key.","Gets a mutable reference to the value under the specified …","","","Inserts key-value pair into the map. Replaces previous …","Inserts an element into the set.","Inserts an element into the container.","Inserts an element after the specified position in the …","Returns an iterator visiting items that exists in both <code>self</code>…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a consuming iterator, that is, one that moves each …","Creates a consuming iterator yielding elements in …","","Returns true if <code>self</code> has no elements in common with <code>other</code>.","Checks whether the container is empty.","Checks whether the container is empty.","Returns whether there is no any element in the set.","Checks whether the container is empty.","Returns true if <code>other</code> contains at least all elements in …","Returns true if <code>self</code> contains at least all elements in …","Creates an iterator that yields immutable reference of …","Creates an iterator that yields immutable reference of …","Creates an iterator yielding immutable reference of each …","Creates an iterator that yields immutable reference of …","Creates an iterator that yields mutable reference of each …","Creates an iterator that yields mutable reference of each …","Creates an iterator that yields mutable reference of each …","Gets the number of elements in the container.","Gets the number of key-value pairs in the container.","Gets the number of non-repetitive elements, equivalently …","Gets the number of elements in the container.","Constructs a new, empty <code>SinglyLinkedList&lt;T&gt;</code>.","Creates an empty map with capacity 0.","Creates an empty set.","Creates an empty Bloom filter with desired capacity and …","Constructs a new, empty <code>Deque&lt;T&gt;</code>.","Initialize a queue with empty vector","Compares sets to determine whether one is a subset of the …","Peeks the last element added without tampering the …","Retrieves the least recently added element without …","Removes the most recently added element that was not yet …","Removes and returns the last element of the container. If …","Removes and returns the first element of the container. If …","Removes and returns the first element of the container. If …","Adds an element to the collection.","Appends the given element value to the end of the …","Prepends the given element value to the beginning of the …","Prepends the given element value to the beginning of the …","Removes and returns an element at specified position from …","Removes a pair with specified key.","Removes an element from the set.","Reverses the order of the elements in the container.","Returns","Retrieves the size of the queue.","Returns an iterator visiting items that only exists in …","","","","","","","","","","","","","","","","","","","","","","Returns an iterator visiting items that exists in <code>self</code>, in …","Creates a map with a given capacity as the number of …","Initialize a stack of certain capacity.","Handmade binary search for a sorted sequence.","Exponential search. An binary search variant that can …","Search in sorted sequences by checking the next position …","Linear search.","Marcin Ciura’s gap sequence.","Binary insertion sort.","Bubble sort","Optimized bubble sort","Bucket sort","Counting sort","Heapsort.","Insertion sort.","Introsort.","Mergesort.","Mergesort bottom-up version.","Pattern-defeating quicksort.","Quicksort with Lomuto parition scheme.","Quicksort with 3-way parition scheme.","Quicksort with Hoare parition scheme","Manual tail-call opitimized quicksort with Lomuto parition …","Tail-call opitimized quicksort with Lomuto parition scheme.","Radix sort for sorting unsigned integers.","Selection sort.","Shellsort","Timsort."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,1,7,2,3,4,5,6,1,7,3,2,3,4,6,3,4,7,4,2,1,7,2,4,2,1,2,3,4,5,6,1,7,4,1,3,3,1,1,3,4,6,2,4,2,3,4,5,6,1,7,2,3,1,4,2,3,4,1,4,4,2,3,4,1,2,3,1,2,3,4,1,2,3,4,6,1,7,4,5,7,5,1,2,1,5,1,2,1,2,3,4,2,5,7,4,2,3,4,5,6,1,7,2,3,4,5,6,1,7,2,3,4,5,6,1,7,4,3,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,[[["u64",0],["u64",0]],["u32",0]],[[["str",0],["str",0]],["usize",0]],[[["str",0],["str",0]],["usize",0]],[[["str",0],["str",0]],["usize",0]],null,null,null,null,null,null,null,null,null,[[["",0]],["option",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["usize",0]],[[["",0]]],[[["",0]]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[]],[[]],[[["",0]],["option",4]],[[["",0],["hashset",3]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["",0]],["bool",0]],[[["",0],["hashset",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["option",4]],[[["",0],["",0]],["option",4]],[[["",0],["",0]],["option",4]],[[["",0],["usize",0]]],[[["",0],["usize",0]],["",0]],[[["",0]],["option",4]],[[["",0]],["bool",0]],[[["",0],["",0]]],[[["",0],["usize",0]],["result",4,[["usize",0]]]],[[["",0],["hashset",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["hashset",3]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["hashset",3]],["bool",0]],[[["",0],["hashset",3]],["bool",0]],[[["",0]],["iter",3]],[[["",0]]],[[["",0]]],[[["",0]],["iter",3]],[[["",0]],["itermut",3]],[[["",0]]],[[["",0]],["itermut",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[]],[[]],[[]],[[["usize",0],["f64",0]]],[[]],[[]],[[["",0],["hashset",3]],["option",4,[["ordering",4]]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["usize",0]],["option",4]],[[["",0],["",0]],["option",4]],[[["",0],["",0]],["bool",0]],[[["",0]]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["hashset",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["hashset",3]]],[[["usize",0]]],[[["usize",0]]],[[["",0]],["result",4,[["usize",0],["usize",0]]]],[[["",0]],["result",4,[["usize",0],["usize",0]]]],[[["i32",0]],["result",4,[["usize",0],["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],null,[[]],[[]],[[]],[[]],[[["usize",0],["usize",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"Deque"],[3,"SinglyLinkedList"],[3,"HashMap"],[3,"HashSet"],[3,"Stack"],[3,"BloomFilter"],[3,"Queue"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};